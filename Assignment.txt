Assignment for Winsoft Technologies

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.Arrays;

public class MergeArrays {

    public static void mergeArrays(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;

        
        int j = m - 1;
        for (int i = m - 1; i >= 0; i--) {
            if (X[i] != 0) {
                X[j--] = X[i];
            }
        }

        
        int i = j + 1; 
        int k = 0;     
        int l = 0;     

        while (i < m && k < n) {
            if (X[i] < Y[k]) {
                X[l++] = X[i++];
            } else {
                X[l++] = Y[k++];
            }
        }

      
        while (k < n) {
            X[l++] = Y[k++];
        }
    }

    public static void main(String[] args) {
        int[] X = {0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] Y = {1, 8, 9, 10, 15};

        mergeArrays(X, Y);

        System.out.println("X[] = " + Arrays.toString(X));
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Arrays;

public class MaxSumPath {
    
    public static int maxSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        
        int sumX = 0, sumY = 0, result = 0;
        int i = 0, j = 0;
        
        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                sumX += X[i++];
            } else if (X[i] > Y[j]) {
                sumY += Y[j++];
            } else {
                result += Math.max(sumX, sumY);
                result += X[i];
                sumX = 0;
                sumY = 0;
                i++;
                j++;
            }
        }
        
        while (i < m) {
            sumX += X[i++];
        }
        
        while (j < n) {
            sumY += Y[j++];
        }
        
        result += Math.max(sumX, sumY);
        
        return result;
    }
    
    public static void main(String[] args) {
        int[] X = {3, 6, 7, 8, 10, 12, 15, 18, 100};
        int[] Y = {1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50};
        
        int maxSum = maxSumPath(X, Y);
        System.out.println("Maximum sum is " + maxSum);
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





Q3:Write a Java Program to count the number of words in a string using HashMap.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


import java.util.HashMap;
import java.util.Map;

public class WordCounter {

    public static void main(String[] args) {
        String input = "Poonam Gaikwad";
        
        Map<String, Integer> wordCounts = new HashMap<>();
      
        String[] words = input.split("\\s+");

        for (String word : words) {
            word = word.toLowerCase();

            if (!wordCounts.containsKey(word)) {
                wordCounts.put(word, 1);
            } else {
                
                wordCounts.put(word, wordCounts.get(word) + 1);
            }
        }

        for (Map.Entry<String, Integer> entry : wordCounts.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Q4:Write a Java Program to find the duplicate characters in a string.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


public class DuplicateCharacters {  
     public static void main(String[] args) {  
        String string1 = "Winsoft Technologies";  
        int count;  
          
        //Converts given string into character array  
        char string[] = string1.toCharArray();  
          
        System.out.println("Duplicate characters in a given string: ");  
        //Counts each character present in the string  
        for(int i = 0; i <string.length; i++) {  
            count = 1;  
            for(int j = i+1; j <string.length; j++) {  
                if(string[i] == string[j] && string[i] != ' ') {  
                    count++;  
                    //Set string[j] to 0 to avoid printing visited character  
                    string[j] = '0';  
                }  
            }  
            //A character is considered as duplicate if count is greater than 1  
            if(count > 1 && string[i] != '0')  
                System.out.println(string[i]);  
        }  
    }  
}  


